// Code generated by go-bindata. DO NOT EDIT.
// sources:
// metric-store-ca.crl (934B)
// metric-store-ca.crt (1.777kB)
// metric-store-ca.key (3.243kB)
// metric-store.crt (1.545kB)
// metric-store.csr (952B)
// metric-store.key (1.679kB)

package testing

import (
	"crypto/sha256"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metricStoreCaCrl = []byte(`-----BEGIN X509 CRL-----
MIICiTBzAgEBMA0GCSqGSIb3DQEBCwUAMBoxGDAWBgNVBAMTD21ldHJpYy1zdG9y
ZS1jYRcNMjMwOTI5MTIyOTAxWhcNMjUwMzI5MTIyODU2WjAAoCMwITAfBgNVHSME
GDAWgBRe77cOX34ZLZlM152+09grbMuWfjANBgkqhkiG9w0BAQsFAAOCAgEAMl3x
Igte06qF1VBfG+q84H+kbWAO/DplFDD3CFJYHuUnWFoM2IIMy+jc+iE2s7c1bG5o
GGeCyfKPXfNWcr16BlMx6a5W0IfliJJCFa/Okt/SdegUJndVXxNEHvw6vp2vaLdo
QCw6gNMZrcoVxNgU3Q438qO91nS27HKO7XPukKNxDyQ8jTgblh/AKLKQrGLwIK7Z
BfxdgvXUlcrg6xyao8+cJT4aEnDy3o2svtBBrQ/aapnO9ohBbjGbPYdNqYbOBpLz
ot+FEtPTJqbWVi1kKOP08lg1YszynektdlrsG7276GngTA/rucDA57RFUU/EpmFP
gLVsZoDseB5N6s4ciG1T4e3p6l68C6kkLU7tO4/mPw95dlVr6nLMNLhwic/61JME
j3m9iX19SgRTYYFDFYyuTh9gDgbXN3XEoBjnuiNzNvNed1UOgli3p69aHnVQSda2
UB1WxZMq5b0ugTgAHAUBx9sS8nTmbZs+cwNLq5qONB60wQlb/WqXmrhvHsPx3anC
JmGkq0gesEfewzUcYu4RuAOmUb6p578fs06dS+0aSMfaseY8Lu6eDXePBEC0//jC
VDq5KqMPl/kZwRmv0eTrmGtACz678sgyKWTSMSvDW51gIXlgyt7vO7Xd8U5Ly2b4
EiFa95Ym2YvQZqwBqTEsF/1qtqCoqDn8zGw+RWs=
-----END X509 CRL-----
`)

func metricStoreCaCrlBytes() ([]byte, error) {
	return _metricStoreCaCrl, nil
}

func metricStoreCaCrl() (*asset, error) {
	bytes, err := metricStoreCaCrlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store-ca.crl", size: 934, mode: os.FileMode(0444), modTime: time.Unix(1695990541, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc6, 0x90, 0x24, 0x87, 0x22, 0xdf, 0x2, 0x1e, 0x3, 0x83, 0x76, 0x19, 0x27, 0xf1, 0x45, 0xdb, 0x48, 0xd3, 0xe2, 0xec, 0x92, 0xde, 0xb6, 0xca, 0x56, 0x67, 0xf2, 0x30, 0xee, 0xf0, 0xb1, 0xf8}}
	return a, nil
}

var _metricStoreCaCrt = []byte(`-----BEGIN CERTIFICATE-----
MIIE9DCCAtygAwIBAgIBATANBgkqhkiG9w0BAQsFADAaMRgwFgYDVQQDEw9tZXRy
aWMtc3RvcmUtY2EwHhcNMjMwOTI5MTIyOTAxWhcNMjUwMzI5MTIyODU2WjAaMRgw
FgYDVQQDEw9tZXRyaWMtc3RvcmUtY2EwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAw
ggIKAoICAQC3xuw9dqGjW1z1K0/Asen/DbyxTq1di4SIHm83d4sJ7bINQX9jacXm
d8WuEmmFw3VOoKdrF7XtAq3hkpwWQ6s53wiOiRhunoIYhsfdwjnv7MPM54OWHBaY
wy5kdQRul36AvareIN9JPxiWHIr9qmB1JArsceFJ0CDd0WPuz1c3X2Bx/wnERi7K
VBZtuA2tv7CRAxhqrnOrh1dyX0MSQlm5bCyEoIq0bmLbH45pzpDaIUMIk8k/cp3U
NMjtb8mYN5AyQ1++ec1pQoJYZ603sLaaWLR4nZjJjT4YrZoPZSp8XoWH+8GI4728
OAQXuNQ4RL0c0Ix2YM0efO1cRRwuxTaS+H4ndx+aIEYicKERKo34iVBF2mZlTFCe
P67xj+gIPs9jh9rilv14njwQ+HrEhVGiQwOUCtYisvOFMIJDOt1FRAF+vFTXvtQy
IfBirRZ01QvHGQaELWYvTQuM5G7VkhI/Xy7CygoapyuoNFqafOtoCqSQIjEIvFth
P/4nvOq2s0axh5Gmv1YDvLcE1WJ6X6wAJ9wWSQyN9SMzutQJ4mAWRCQzK0F0gIcM
B0ZuCpP4KTJSzFVZE8bBSwqm76aaiqyb08hb8kISKfcsGZpB0y9YwfSW/Z1tn6jJ
Zw5x8103RRgJP/PJpoLOm54s+iOvWDU5XgDhbkivKbDmgK7Y0CfhrQIDAQABo0Uw
QzAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQU
Xu+3Dl9+GS2ZTNedvtPYK2zLln4wDQYJKoZIhvcNAQELBQADggIBAGL/l+1XtgAt
Zx3S2p5r2i0uY80WvYgd9+3vesj4aJImBLRcXL5TD61MbMW6dX0UOAH9GWfyuPmE
im90ylQLlxeKIeuc/C+0qcf8qmuJ3JmkdBV3av9GbaDZsQmRzTCzccMtjZGOXOgT
oKAOxUmKRgX9ezMYFWYE44a2RzX/3Il63pbJft3cnRe+uiomgsybIJI/TytzlZ0P
4kDHGAUgpwV5YH4OAx264cNWW9Jeexg/uPmT1AKEAXrs99DgM5Q4bT0E7colRSKl
QxGOBJ9C2vbmObny9t62TKqPB7SEwxPKISTljdvypmWwdJlDBEfmLFWvbin9ycOG
YPCLUwH/EJLhFpsshgmka6E4gkUMGyO6rkZoziJD62mRkbdp4olDWkJAe8DXSmZl
1xcVbypGXCcbq/HRRHpSjThgzVKFwG0lovE7tqXn+UXdDw9+/1Khl0qmTsqmRIxs
6xfmJ0bNd7VRginae/U8g+AasGnQk4n8JBprWUz39Lfi5jY9JtBrXd7tB/2212oU
nwgV0JACmfcRN8l0x+oAkvl2qouvdlJaR0q65ihrYHiIHW3RVQbsg7y+2zKbrzl9
RsKOH4p1CfjB6rvIRmQ7kgkuPZrtibGFgQtjr76/Cj7fDr9+vM5r0RjO1VKrn869
C2jQDjkQlLWn4gtVq7qUjufbii9aBy4c
-----END CERTIFICATE-----
`)

func metricStoreCaCrtBytes() ([]byte, error) {
	return _metricStoreCaCrt, nil
}

func metricStoreCaCrt() (*asset, error) {
	bytes, err := metricStoreCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store-ca.crt", size: 1777, mode: os.FileMode(0444), modTime: time.Unix(1695990541, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xed, 0xf4, 0x67, 0xdc, 0xcd, 0x2c, 0x8c, 0x60, 0x0, 0x2a, 0xab, 0xe7, 0x27, 0x53, 0x9f, 0x1c, 0xdf, 0x27, 0xc0, 0xac, 0x74, 0xe4, 0xb8, 0xcd, 0x56, 0x4f, 0xd8, 0x94, 0x3d, 0xac, 0x68, 0x2f}}
	return a, nil
}

var _metricStoreCaKey = []byte(`-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----
`)

func metricStoreCaKeyBytes() ([]byte, error) {
	return _metricStoreCaKey, nil
}

func metricStoreCaKey() (*asset, error) {
	bytes, err := metricStoreCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store-ca.key", size: 3243, mode: os.FileMode(0440), modTime: time.Unix(1695990541, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xac, 0x6a, 0xb4, 0x6a, 0xd1, 0x3f, 0xff, 0x15, 0x31, 0x88, 0x8e, 0xd8, 0xef, 0x6a, 0xe4, 0x61, 0xa3, 0xb8, 0x2f, 0x64, 0x3f, 0x25, 0xb7, 0x74, 0xfd, 0xb8, 0x71, 0xd5, 0xc0, 0xaf, 0x93, 0x98}}
	return a, nil
}

var _metricStoreCrt = []byte(`-----BEGIN CERTIFICATE-----
MIIERzCCAi+gAwIBAgIQePcfEuW010YumDTZxfQBCzANBgkqhkiG9w0BAQsFADAa
MRgwFgYDVQQDEw9tZXRyaWMtc3RvcmUtY2EwHhcNMjMwOTI5MTIyOTAyWhcNMjUw
MzI5MTIyODU2WjAXMRUwEwYDVQQDEwxtZXRyaWMtc3RvcmUwggEiMA0GCSqGSIb3
DQEBAQUAA4IBDwAwggEKAoIBAQDBe+fVcmRR/YlpZYa56D+6R3LO95/qRMcftmob
UxL4hvTz8IErCFN4vnp1TEIkc3A+UpUq7fJ9Y+0+fc43IHfqUC06nuaMw3dz/Ohc
SuOvBNWKzLZQC/7TG/mgIIh4pGNhIraWw3Souk7QcffeAmR8IdrJOlBiilJjPY7L
2n7Bn/cAU3B/ZhkiiFueZmvqJWzGFZIPQrNmuAOiHIcgGOUtU2gKdF3hwIGTw9GA
X4tllcGYH1f28qfr/CWGYYd54uA/UnfIlk/JiQxysvfKfbMqOl4cNUM3tz2XQiPJ
kIV4y8XiQF0a8D3l7ymnowjbvDoyxxomLjbQzx20reBEqhYPAgMBAAGjgYswgYgw
DgYDVR0PAQH/BAQDAgO4MB0GA1UdJQQWMBQGCCsGAQUFBwMBBggrBgEFBQcDAjAd
BgNVHQ4EFgQU81VPsr3nIjJVjmV6A49npKaSEQ8wHwYDVR0jBBgwFoAUXu+3Dl9+
GS2ZTNedvtPYK2zLln4wFwYDVR0RBBAwDoIMbWV0cmljLXN0b3JlMA0GCSqGSIb3
DQEBCwUAA4ICAQCZXJKsPxRiPF0OjnQfE8N/1Rn4AV20RtSM5bDJEnOqtSThSo+R
GqJtcN/8hwnrYpcE8A5XgzPIIjDz8wpPo3mJSu3AnoWR2iVA5xqQvkbtMadi2frA
Sc/ZR8qe34TRUOoWnCGuex6CDw5IqNg+vyMquS1i8qMMQhrpIJiHTCsSBxmXehFx
zV9DZaZnYKOsn4ycCDsB0LGVQRnfF6BsYGsv24I0/Bakfp/IvcXi2r5jAps1mFOS
0aEYSYPOUMBCxz+kbXkdY16shWOclLkNZEWWHl1N9QlRp2fEmzKo6RcWwMIQbV88
ZSJTtLz76xpbBKTQyKTj4uEhxg63kFIisuPrIVJS5AHKf66A5zqtoYYCzu04Zamq
Eo1qqh8h3GzB5X35iT2VrJBccJbcSG+W9FL3FKsWPVJ8ltshS5s6Z54OURF5Ylpv
eHV4UBY75g1cQjhlIlODeicudpTV4oRPK21mFduG+YWkumTugK2uTFHlH8BdtyRR
GeN5Ba3ekfV+UzVJi4fvsdRtBJmr5+qMdFhmgTNecJwN2cWGCKCiY5UzZy6YLGIq
oNdDHTqOy1tXqIpgFBSb44ONzB1bLrqC2Y8wbJb7IX6Y8Pjrbr9yWJmVWFPYWtlv
ZT6k3wublaBBhm4R41xtGwf6H7slLAWngN/G+8vHw/mrYGufyadWV2tQbg==
-----END CERTIFICATE-----
`)

func metricStoreCrtBytes() ([]byte, error) {
	return _metricStoreCrt, nil
}

func metricStoreCrt() (*asset, error) {
	bytes, err := metricStoreCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store.crt", size: 1545, mode: os.FileMode(0444), modTime: time.Unix(1695990542, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa0, 0x9f, 0xf1, 0xbd, 0xb8, 0x61, 0x7e, 0x7b, 0x79, 0xa2, 0x64, 0xb6, 0x9, 0x92, 0x74, 0xfb, 0x87, 0xeb, 0xfa, 0x1d, 0x90, 0x7a, 0xda, 0x75, 0x8b, 0x38, 0xd2, 0x51, 0x5, 0xc6, 0xfd, 0x99}}
	return a, nil
}

var _metricStoreCsr = []byte(`-----BEGIN CERTIFICATE REQUEST-----
MIIChjCCAW4CAQAwFzEVMBMGA1UEAxMMbWV0cmljLXN0b3JlMIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwXvn1XJkUf2JaWWGueg/ukdyzvef6kTHH7Zq
G1MS+Ib08/CBKwhTeL56dUxCJHNwPlKVKu3yfWPtPn3ONyB36lAtOp7mjMN3c/zo
XErjrwTVisy2UAv+0xv5oCCIeKRjYSK2lsN0qLpO0HH33gJkfCHayTpQYopSYz2O
y9p+wZ/3AFNwf2YZIohbnmZr6iVsxhWSD0KzZrgDohyHIBjlLVNoCnRd4cCBk8PR
gF+LZZXBmB9X9vKn6/wlhmGHeeLgP1J3yJZPyYkMcrL3yn2zKjpeHDVDN7c9l0Ij
yZCFeMvF4kBdGvA95e8pp6MI27w6MscaJi420M8dtK3gRKoWDwIDAQABoCowKAYJ
KoZIhvcNAQkOMRswGTAXBgNVHREEEDAOggxtZXRyaWMtc3RvcmUwDQYJKoZIhvcN
AQELBQADggEBAHd2z8BeOdgUcDY8QueoYKNlee27hpPCGOle584vrhiEFyEOprJU
wgDM59nQF1rMkM4jpvLDw65eRDFg+E+9HwU72yU8Brfbz77O1b02n4q+8U6CpTN1
nuOu/Yx+4Mc+9ksN08pwm+5iGcbrK0Vl7zRO/Jsc1zke9kxM6fgJcDo3dC68oTlz
SEqtZLW/HtBlzpDVJk6j0OU6MddTcPu9/ICTn2J+FmJYM+7EH6JCi9Se/kXZjs93
odBE5Wpq8OvP4p2ugO3fOEiRYLZVoc58sP01vuTYZBfD5dqQpmRcIf4YeaubPUVN
ZGIccSHG4QKtk2kAraNGSbUplv8K9xWq/oY=
-----END CERTIFICATE REQUEST-----
`)

func metricStoreCsrBytes() ([]byte, error) {
	return _metricStoreCsr, nil
}

func metricStoreCsr() (*asset, error) {
	bytes, err := metricStoreCsrBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store.csr", size: 952, mode: os.FileMode(0444), modTime: time.Unix(1695990542, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x14, 0x74, 0xfc, 0x2d, 0x3e, 0x50, 0x43, 0xed, 0x86, 0x54, 0xc1, 0xf9, 0x9, 0x28, 0x17, 0xdc, 0x91, 0xab, 0x7a, 0x22, 0xfd, 0xb0, 0x65, 0x81, 0x84, 0xe4, 0x80, 0x34, 0xf, 0x69, 0x7a, 0x19}}
	return a, nil
}

var _metricStoreKey = []byte(`-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAwXvn1XJkUf2JaWWGueg/ukdyzvef6kTHH7ZqG1MS+Ib08/CB
KwhTeL56dUxCJHNwPlKVKu3yfWPtPn3ONyB36lAtOp7mjMN3c/zoXErjrwTVisy2
UAv+0xv5oCCIeKRjYSK2lsN0qLpO0HH33gJkfCHayTpQYopSYz2Oy9p+wZ/3AFNw
f2YZIohbnmZr6iVsxhWSD0KzZrgDohyHIBjlLVNoCnRd4cCBk8PRgF+LZZXBmB9X
9vKn6/wlhmGHeeLgP1J3yJZPyYkMcrL3yn2zKjpeHDVDN7c9l0IjyZCFeMvF4kBd
GvA95e8pp6MI27w6MscaJi420M8dtK3gRKoWDwIDAQABAoIBAQCuScoFWP0LamKM
gXsCHjbBuzitPRxdMEVayLv+DzBIlXE0CJKiS+a9HoA7B02Rfjc+vK9IM326+/eq
0jKfL+01MbH8W0T8ydrhrZE2CfPdJXKijFMx+gw66LlNR+EHI7Wtu1JUro54qxLx
66fG4crYkrp9h7z/dvBOGxZ1hUWnbbrXvDf2NHyW/bP38UAFll9LJrhhtRbVRMyR
zDXwpU4OfPN2YYXAn85/tOkxzRHf5XUEY17jIceZj3Zo1P8dCH2QrWKPNbGDWTc7
Rj0LHIuuXBKZa/nlcoLEP7qETkIP21Isnk8uoT8HLDH7AvYTpx62JLMHOyW88ApG
Yl7b2DbxAoGBAOpffjYsycTAH/mwCMIQpjuAxJZMwSqZ41FvU4YF1fSR8bYoxi3c
5hMy0h8FzyinGQztyu4P/rVD6OmurulgsEuw010Cy1Xgm87u1/UJUO2jExqLyHFU
7dGYp0xkrXHPCwCfaOfBtb6l+NBffdBDhsA7SmTXxN2/NZSVpU2FvvD5AoGBANNW
ga8Q0i80zyJLu3BCKKNirrVTcbMl4FTVNw4MIeS0VDaR6GqTxBJ1IxOJnVKYbwZU
TWaH1LNr6VgbI+Fpkx1on1yzagCUPxignwhREmBzcgltl7AwrPckcBkwt3WoJH2S
Yvu3gkZatVP0r+UPQ6IblgKsKNx98ihuMR4bwIlHAoGAODQWLB+pcwkvoczZDNC5
TGOgwPo/CFxG6uxrdyRHHpMxB6HXhIAInGn/gXj/KJyJoVQU6enkBsv2OrOtNkH9
hOkuhot4/2sRchpMp3JIefQ1TJRgyOy46x5UYDl0bmpcFRYlLg6B6uoaNL3xidPn
qImPWYd0qkiELNGGBoUgOOECgYEAzcWmAZIsRMBzih4ZBCW2sdcM6wqzY05WzeLI
d0oC2k9my7dniBYWTC53l7dfUiOPvqboshNBW+2PRzUty3XjQzgyKq2aYbP2d4E1
N4DQls7xUxK9JlVOpFh7OVvA1bOAzC9zZ0n3c48wjO1rMmmZXcbkWffM1VtgJFOe
SYWWA1MCgYAsIkl9y2vF5FgBAgy6ZmmAKQRZUbt50NKoLAcYSSpiRDTqmBkZ+6zl
gmHOwIp+PF1zH+UfxZdxppBkx6Cinse3b9bUrHpztnD2TCNmgb1blAYeWENHuWbq
mJ5r4Imw3Nv8c4zAbTR/rTfBQLnVz5/bzOl2K2iv4M0ngRa7Yx0L4A==
-----END RSA PRIVATE KEY-----
`)

func metricStoreKeyBytes() ([]byte, error) {
	return _metricStoreKey, nil
}

func metricStoreKey() (*asset, error) {
	bytes, err := metricStoreKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store.key", size: 1679, mode: os.FileMode(0440), modTime: time.Unix(1695990542, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf, 0x69, 0x50, 0xca, 0x5d, 0xc8, 0x51, 0x35, 0x77, 0x6e, 0x3c, 0xc6, 0xf0, 0x9f, 0xa9, 0x2d, 0x77, 0x0, 0xb8, 0xfe, 0xf, 0x7e, 0x8f, 0x87, 0x13, 0x43, 0x53, 0x73, 0x19, 0xf9, 0x2d, 0x63}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"metric-store-ca.crl": metricStoreCaCrl,
	"metric-store-ca.crt": metricStoreCaCrt,
	"metric-store-ca.key": metricStoreCaKey,
	"metric-store.crt":    metricStoreCrt,
	"metric-store.csr":    metricStoreCsr,
	"metric-store.key":    metricStoreKey,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"metric-store-ca.crl": {metricStoreCaCrl, map[string]*bintree{}},
	"metric-store-ca.crt": {metricStoreCaCrt, map[string]*bintree{}},
	"metric-store-ca.key": {metricStoreCaKey, map[string]*bintree{}},
	"metric-store.crt":    {metricStoreCrt, map[string]*bintree{}},
	"metric-store.csr":    {metricStoreCsr, map[string]*bintree{}},
	"metric-store.key":    {metricStoreKey, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
