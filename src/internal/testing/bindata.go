// Code generated by go-bindata. DO NOT EDIT.
// sources:
// metric-store-ca.crl (934B)
// metric-store-ca.crt (1.777kB)
// metric-store-ca.key (3.247kB)
// metric-store.crt (1.545kB)
// metric-store.csr (952B)
// metric-store.key (1.675kB)

package testing

import (
	"crypto/sha256"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metricStoreCaCrl = []byte(`-----BEGIN X509 CRL-----
MIICiTBzAgEBMA0GCSqGSIb3DQEBCwUAMBoxGDAWBgNVBAMTD21ldHJpYy1zdG9y
ZS1jYRcNMjMwOTEzMDIwNDQ0WhcNMjUwMzEzMDIwNDQwWjAAoCMwITAfBgNVHSME
GDAWgBSJfwRUgDBljLyvVQUnMyTsPxaJkDANBgkqhkiG9w0BAQsFAAOCAgEASsoW
P7kErxpEg14AIEu04WyBWVR/8u1SQIWJRCsV3JPWNRp9+kXTAvCOYJFIERg1qWmr
d4zcpzfVqd0IgR8a9no3rc0d7ZPRHFIndEHq7+P4s+FuTPGo1YxxIdx7vNvetfLg
R3l3hyaSLm8T1fZLVj9954XHxC1F28s2Bt3qLnYo9ngm8NtR9BfN/RvHC+Mqm1Gp
KroKYZz6Hk16pmxQV6DhZNuFaf1Iuwxoma9yMMuqfiIDh7x+e1+mAy/adasCdgxA
fLeQk34bX7nL0yoI3VTeujUZ6L5ITO4wl5IWrH5OHhHTQSjD7xbusI8OM6lBvmbX
BF63f14NTxhVWczQA7pRg6GJXDphfxpG41zogn3aHm5yZpj+ujDOMZbWkX8NqLre
8pwsJDcift1sitRHpxVqH5KIxyFzdt/mvI+eerbWoqJTFFxxlQKYzJn3L4n4zsM8
dksBPM7EnqKHz/S4mNueFlXM0BjSw8OxVce84ZCwJjbArLK/EananHolZLZM2VYA
WfMGGJR3P27AC5LcX/qZpRGOOcYBW1U9dHcygC+y8E08qABVDmzDy13H30UOXKe8
IKpuMS/I3ynjKeX2H3t53hcrVm7rJoKbjY8NewAN104YoCmB1XGI7qmypTJPjEN0
A9NXckmEeRNowGOACMywZtLLYAjCRYPYjZJq41o=
-----END X509 CRL-----
`)

func metricStoreCaCrlBytes() ([]byte, error) {
	return _metricStoreCaCrl, nil
}

func metricStoreCaCrl() (*asset, error) {
	bytes, err := metricStoreCaCrlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store-ca.crl", size: 934, mode: os.FileMode(0444), modTime: time.Unix(1694570684, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1f, 0x4c, 0x6a, 0xa, 0x31, 0xe5, 0x3c, 0x1, 0x86, 0x8, 0x29, 0x4c, 0x25, 0xf8, 0x5d, 0xa6, 0xa2, 0x27, 0x69, 0xe4, 0x5, 0x10, 0xd5, 0x88, 0xa7, 0xa5, 0xf7, 0xca, 0x5d, 0x26, 0xf4, 0xf8}}
	return a, nil
}

var _metricStoreCaCrt = []byte(`-----BEGIN CERTIFICATE-----
MIIE9DCCAtygAwIBAgIBATANBgkqhkiG9w0BAQsFADAaMRgwFgYDVQQDEw9tZXRy
aWMtc3RvcmUtY2EwHhcNMjMwOTEzMDIwNDQ0WhcNMjUwMzEzMDIwNDQwWjAaMRgw
FgYDVQQDEw9tZXRyaWMtc3RvcmUtY2EwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAw
ggIKAoICAQDbICuH2PmV3x7l8atEulZ8Svqy1GWmP/GvEY478GXnJWd7mxOEFFpe
KumlAJuZ8y7HIzZYlKg5+WqTaBKO+7SHU17XDsOjMG66Sq2aNM7yaV6AdDVeAs+a
TJPUtgwAAnY4g3//gA+y4JjhjcVcLfBBMi5xwOthDcUX6aOEZcztOLhtozgfbAEa
AgE+RhEXhX58kOSpiYirEKJ0gmAkw8lAX2TxSQ93n4HuY0d9RJir4EpKcub8v4yY
etOxjsRSebxARxxdDQzk1PNh98Pdu/oqq+WZbdwW/s7riv12T4evEADLNcF3zJfj
1dKGFxbTVbMhvjq0KvqN8+2VUw1giXiT84bbxB8f72wgyg8WfYoiqjMwqCZ7tn/O
BCnphIWYyqUnIWBHnL64fx0fpI7QsUI6Ms2uGfinVzyqkx25ekzgY5vyqAuCXIub
qJ3Q7GVxNPq5JqRle4xcbfOxx1p88evB7s+6Uwf8JZAASh8vsJUyF7sICWzPqdsg
I6EAOnjnwpNMadZXx3vTXIGRcyP9fFBmEZJP+j+FHW4naeCPPYU79kDHjrB12wXi
iZ84zYRSpMB1enIAqzU2tIURTT50X1jRa6cVuOXIvc4jZ+ULz7sODf4NksmxkfB4
vRI93MnHSLPtyhyKa0v3OdimXHiMvNWYbGchqA/Mnl8yWVvKMroQhwIDAQABo0Uw
QzAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQU
iX8EVIAwZYy8r1UFJzMk7D8WiZAwDQYJKoZIhvcNAQELBQADggIBAJ036RVRLj0m
JSydNGDD/GRRgE5FTR6syGoo7sPVz7X7zNDwgiYqH3yyS1pvsfa3IQGBRnIPajRx
NLOT1dg+H0sV9SL7ySf7QPMUSUIwFO4Npf/IDMNxd/rqryXtKy5E/zxu4ypF99zD
8AkAM5OcoU/EC/tc3rP3AjqD1UroveM4aKptmq7c9xBHxClxjsjgO2T+ZhqwROlv
K5WepiumhbrNTjbGR8b7c2uPBcAmQXrfJV9IjAg8fWBnQOyIsYg7xU34eWbdgCry
fHKXN1tLilaFVtJ4PONmajR3l0Tvr5zYHcUfZQ5hkB3r5kyk8K7f39xmri/otQhb
Kn6YB2se94Ggftitd/B+HxmqnQsrq+D54gVRo4+H79t2ji8BlTfn5coblccpJ79Y
a90/Hs6NSpKZ2X7uzPPX8QyamqmwuJOUVLqjKwy0L9NJUbCfHdQvENYkUqbhOdv2
yo6afcLNnP35BLNjZPQbvwk830l4x+o9ExBJM5qhtPGJan/0qRpiHmNgEiAewryz
G5UOMfAxC6NQVQp4ItMy0S4R+qV9e04Qv6ZnAC6K7RJ80r63tVZu5TZwv56/7S3Q
jM6SOmRZx/CXUTW13Wx7BX1oT8bCpOq3EMhxwF4/FCmGuspRwzDJGh8NjXxEABXm
/FadrpNxk7w6o+RXTZ2vik5ncaHRInMD
-----END CERTIFICATE-----
`)

func metricStoreCaCrtBytes() ([]byte, error) {
	return _metricStoreCaCrt, nil
}

func metricStoreCaCrt() (*asset, error) {
	bytes, err := metricStoreCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store-ca.crt", size: 1777, mode: os.FileMode(0444), modTime: time.Unix(1694570684, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf8, 0x6b, 0xe7, 0xe3, 0xfb, 0x87, 0x64, 0xb8, 0x60, 0xc3, 0x7f, 0xd6, 0x22, 0x96, 0x5a, 0xaa, 0x58, 0xe8, 0xf8, 0xf8, 0xa7, 0xd5, 0x7a, 0x46, 0x9a, 0x3c, 0x5e, 0x9d, 0x7b, 0x2c, 0x38, 0x36}}
	return a, nil
}

var _metricStoreCaKey = []byte(`-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----
`)

func metricStoreCaKeyBytes() ([]byte, error) {
	return _metricStoreCaKey, nil
}

func metricStoreCaKey() (*asset, error) {
	bytes, err := metricStoreCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store-ca.key", size: 3247, mode: os.FileMode(0440), modTime: time.Unix(1694570684, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xaf, 0x8f, 0xb5, 0x9f, 0x59, 0xaa, 0xe5, 0x9c, 0x9b, 0x76, 0xce, 0xec, 0x2f, 0x99, 0xbf, 0x2, 0x18, 0xf2, 0x67, 0x3e, 0xe5, 0xca, 0x4d, 0x8, 0xd7, 0xc0, 0x7b, 0x96, 0xda, 0x85, 0x9f, 0x60}}
	return a, nil
}

var _metricStoreCrt = []byte(`-----BEGIN CERTIFICATE-----
MIIESDCCAjCgAwIBAgIRANOPjVAuuj4a+Wov8Sb6UlowDQYJKoZIhvcNAQELBQAw
GjEYMBYGA1UEAxMPbWV0cmljLXN0b3JlLWNhMB4XDTIzMDkxMzAyMDQ0NVoXDTI1
MDMxMzAyMDQ0MFowFzEVMBMGA1UEAxMMbWV0cmljLXN0b3JlMIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuGXsLTgCwTOXPCYuWn5OioJK9RA7HhI7o0RM
2IHvTNx+u/QEmBO7WjvJqShYFGO9w8ja2SNFDvmWl+8OrJoHBXZKFWYvKy5Y9zRF
8oiNkbPAaXdkZfm62zdR0h/5M+VnHa+Yn8FUgEJBF8hBdPyJgX1MDRHMrxc/dp8c
7rNT/QaqCjLZNLM4Ta7a5x/rEOlubuztg3N5/DRR5ir2/AVpNpYTRt6bozRnYBfA
MCUYyeAYjNLyKzyfp8sw7x2+bXDzwSGmNhq1X3jQzom/A14Tt2FVBOrrebAyTOJm
8xRZ4SvS79AmeFQ+PPUHR/S0YMfmDPwh7BKXmirCmTmyKiManQIDAQABo4GLMIGI
MA4GA1UdDwEB/wQEAwIDuDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIw
HQYDVR0OBBYEFB07zEtwtJh4zn3Xu7E5wDTZakEUMB8GA1UdIwQYMBaAFIl/BFSA
MGWMvK9VBSczJOw/FomQMBcGA1UdEQQQMA6CDG1ldHJpYy1zdG9yZTANBgkqhkiG
9w0BAQsFAAOCAgEAuU+aNFpRvYTdwttOpIw0QY8oE2sxXDAuFyUV/RUFYXl6Fp88
1h9qF4WoxPIG2RsDzDZhU41DrVUqG3bEeckszjkLy8SmA464S/kmI0xo0JnwYB2Q
+SO103h4D/Mx7IfXe9MpACmKJFbZFA7gaK9M+a3XLnCYKqVKyP9M8RxKz8eNhEeb
rMwNuOkCFbWBvvLzdSE0JHKjCL6nwwKaN53cqJ2nHLK4S+dyDpsEtz4lC5Bbm3dF
4cRwUaRI/CZkjLqprNeRLYqeiHfH9PbWIb6T3js1hq8PdmdtHOFYq9X2wNZ/htry
0pHgDUUSXaCneGHSOYgQbWdv+TARTNTfC7H4tkATSTxf4r34rKf6aDMxrlzuaHoW
zbTwMMxjja95vIHA9fHjj3dmaedSHoW4KYFFqis639sFDDxBHCRuMJYIyPUIhZy/
mJ8628JxBkGaUuT9A5S8m3MRClIDi8t68PnRsYTLOXzCMm4fAUB4dWuXWcfUFoG6
gKq5zHZBufPvFSUh6bbE4RXJl+/TI3GFJau5fFNgO7H0HmKn7mtARmM64/02DmPf
TD581ZS1wxWlNO4oBxR+xfozq3wFKSRRqRTwpsvgZn5GrcU85AXOUJrCoj7QzdcZ
+09iJdFymZu0N7aXtEKNCzfuCHVqiaW1ywGV8AqFLEpwIGtwVQyX6wF2mCU=
-----END CERTIFICATE-----
`)

func metricStoreCrtBytes() ([]byte, error) {
	return _metricStoreCrt, nil
}

func metricStoreCrt() (*asset, error) {
	bytes, err := metricStoreCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store.crt", size: 1545, mode: os.FileMode(0444), modTime: time.Unix(1694570685, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xba, 0x54, 0x5c, 0x5c, 0xf5, 0xbe, 0xae, 0x9e, 0x61, 0x21, 0xdd, 0x55, 0x80, 0xab, 0xbd, 0x69, 0xed, 0xf1, 0xbe, 0x39, 0x63, 0x53, 0x60, 0x59, 0x88, 0x37, 0x25, 0xf2, 0x48, 0xc2, 0xa0, 0x8e}}
	return a, nil
}

var _metricStoreCsr = []byte(`-----BEGIN CERTIFICATE REQUEST-----
MIIChjCCAW4CAQAwFzEVMBMGA1UEAxMMbWV0cmljLXN0b3JlMIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEAuGXsLTgCwTOXPCYuWn5OioJK9RA7HhI7o0RM
2IHvTNx+u/QEmBO7WjvJqShYFGO9w8ja2SNFDvmWl+8OrJoHBXZKFWYvKy5Y9zRF
8oiNkbPAaXdkZfm62zdR0h/5M+VnHa+Yn8FUgEJBF8hBdPyJgX1MDRHMrxc/dp8c
7rNT/QaqCjLZNLM4Ta7a5x/rEOlubuztg3N5/DRR5ir2/AVpNpYTRt6bozRnYBfA
MCUYyeAYjNLyKzyfp8sw7x2+bXDzwSGmNhq1X3jQzom/A14Tt2FVBOrrebAyTOJm
8xRZ4SvS79AmeFQ+PPUHR/S0YMfmDPwh7BKXmirCmTmyKiManQIDAQABoCowKAYJ
KoZIhvcNAQkOMRswGTAXBgNVHREEEDAOggxtZXRyaWMtc3RvcmUwDQYJKoZIhvcN
AQELBQADggEBAEJnBx1low8fve/J8gp7Nl0ip1dHCk5y+yT2/8c/Vlzrhowi9snw
CF8wH64J4pgikIkSaMGiLXAl2yEPNSrQQws8Z5RbmwAbFGMZS9d0Nlq2dFO1xjrI
UBCOEh1y/qZIQ902Qe0ZLHzPILWJEpeSdFCqkW+MSBdxBkY3aQ8uDSikEY5tk79H
TnoZg2ZeeMjTB1vHWb0Pmaj+oM3IMxRHp0iaNVbh3rqgZKkeQqNB7/k7tQBfE8xC
V7DP2Qh1RydT+5tAKaIe1UO/5B9NVbcURjViGEFHKjOvczFMo9xrQAfp4B8Abib6
D8bHxu02YZGT7jSaYKXxoihOLqUNwW/LBpI=
-----END CERTIFICATE REQUEST-----
`)

func metricStoreCsrBytes() ([]byte, error) {
	return _metricStoreCsr, nil
}

func metricStoreCsr() (*asset, error) {
	bytes, err := metricStoreCsrBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store.csr", size: 952, mode: os.FileMode(0444), modTime: time.Unix(1694570685, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa3, 0x50, 0x30, 0x42, 0x5e, 0xb4, 0x66, 0xe5, 0x54, 0x24, 0xce, 0xfa, 0x66, 0xc4, 0x11, 0xc7, 0x6, 0x24, 0x7e, 0xf8, 0x44, 0xa3, 0xf8, 0xd7, 0xdd, 0x5, 0xa0, 0x24, 0xf0, 0xa6, 0x7c, 0x92}}
	return a, nil
}

var _metricStoreKey = []byte(`-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAuGXsLTgCwTOXPCYuWn5OioJK9RA7HhI7o0RM2IHvTNx+u/QE
mBO7WjvJqShYFGO9w8ja2SNFDvmWl+8OrJoHBXZKFWYvKy5Y9zRF8oiNkbPAaXdk
Zfm62zdR0h/5M+VnHa+Yn8FUgEJBF8hBdPyJgX1MDRHMrxc/dp8c7rNT/QaqCjLZ
NLM4Ta7a5x/rEOlubuztg3N5/DRR5ir2/AVpNpYTRt6bozRnYBfAMCUYyeAYjNLy
Kzyfp8sw7x2+bXDzwSGmNhq1X3jQzom/A14Tt2FVBOrrebAyTOJm8xRZ4SvS79Am
eFQ+PPUHR/S0YMfmDPwh7BKXmirCmTmyKiManQIDAQABAoIBADvEfWqirvHkQO60
CW43ZkmqtZT878xtaHsg1i+O3ftxtHpDO4H3U1CJ9HEprHLfaVCeN6ENt4KFD3Sr
fXwgaIoyrwyElGFQonFttgZIkGpbctA8bIRJD3GiWpja2DEj9+o9UiDlzvfLgcGt
nNnISOF5tT6/ODLAPEe8huovoddu1aC/UfYRWq+8zlKgl6JJ7eY9WJEkR9OmsNzs
Qk0ZQEsYzxW5SgkC7fnERNSkwasmZrM7krCve2XW9UJAutFTruv5aHztD7rGXeTP
XWd5XKPXzGTPJ+gPd4i7zANN6rUb+h/Kq+PZwstD6fQAc7Bzs1IB2ByXzDBU9oUm
Uqs834ECgYEAwB4NT/hpj5b31HD/AcNMf2L3izLq9/TuCKu3fBRukAUx81nJk2k/
TTUzTjd05Unfnhc9sawD+QCMLiaxbmyH2/k2iYqty4idD7PfySDhOWseHk8AfeoX
Qm1YVAtlRfkCb9iJ+B9e9wQs4s14BK5OmJ9/ObCPWle55L0WR9RdZ00CgYEA9bbF
Tr6S4B0isYdTxBPFR76SgMZvktREFiJbxZuxlg+0prqU2rEcqvJwku8A95rNxF02
Hhk9FcDKjhveVPGr1/vhg2rh7TENKGVw4a0XA+8GsBAXWQKmRV1j4qlIFa2bVQR2
zQ+LQ70TYML14YHv9xf0rKsQNZ4E5e7hZh9N+JECgYB/jjR2iU/FJ45Kve+CQyIy
XgpPoLIDidrVZPXBa2txMhHVKiM9PZ7q60yyPP3fEupm87Vhlv1YQTXRmp0p3ONj
eRbtwWbdAUqO13XY+3yue+GWbAu+jkN9Nk50FtDZ4ZftnM8WL/YEegA3YgayzOyg
Rx3YttKnQCHLroPxkx2k7QKBgDh6gm/PLkOFbuwPhxmS0c3j6Bjhg9PkJqJP03hg
iTlM8uFAEecSvtwsTeP4O+iuFI4GPuI8OuY9IlH35erwgedrZjKm5rd2hue6KXA2
MQwebRMbH8K98SoQhV0cPA1/kizAke4gnIo9c67SIWJsU5QgVYU67MbmQ4n2lqi6
mVmBAoGBALdxNFs0cJBZKHBzEvMsAhes/wdlx/CWCLYJsRhBKQZW2qDZFWb9vEmZ
2VEqZpH2OlEHIBo5G5UDXfBTIvWYWu9RzXkOScu2PPVRtpjJF0kooGvzBek7n6Q5
EK2dAhg9PUvPc6rEWfHPk4OLpZc5RF024x2lCu/XViRZeX6b9Vyg
-----END RSA PRIVATE KEY-----
`)

func metricStoreKeyBytes() ([]byte, error) {
	return _metricStoreKey, nil
}

func metricStoreKey() (*asset, error) {
	bytes, err := metricStoreKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store.key", size: 1675, mode: os.FileMode(0440), modTime: time.Unix(1694570685, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5f, 0xc4, 0x51, 0xa2, 0xb9, 0xb5, 0xff, 0x3, 0x96, 0x6c, 0xab, 0xb2, 0x41, 0xc4, 0x59, 0x46, 0xd8, 0x98, 0xde, 0xc8, 0xa3, 0x4a, 0xf2, 0xf2, 0xe6, 0x45, 0xd5, 0x2d, 0x61, 0xf3, 0x96, 0xc3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"metric-store-ca.crl": metricStoreCaCrl,
	"metric-store-ca.crt": metricStoreCaCrt,
	"metric-store-ca.key": metricStoreCaKey,
	"metric-store.crt":    metricStoreCrt,
	"metric-store.csr":    metricStoreCsr,
	"metric-store.key":    metricStoreKey,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"metric-store-ca.crl": {metricStoreCaCrl, map[string]*bintree{}},
	"metric-store-ca.crt": {metricStoreCaCrt, map[string]*bintree{}},
	"metric-store-ca.key": {metricStoreCaKey, map[string]*bintree{}},
	"metric-store.crt":    {metricStoreCrt, map[string]*bintree{}},
	"metric-store.csr":    {metricStoreCsr, map[string]*bintree{}},
	"metric-store.key":    {metricStoreKey, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
