// Code generated by go-bindata. DO NOT EDIT.
// sources:
// metric-store-ca.crl (934B)
// metric-store-ca.crt (1.777kB)
// metric-store-ca.key (3.239kB)
// metric-store.crt (1.545kB)
// metric-store.csr (952B)
// metric-store.key (1.679kB)

package testing

import (
	"crypto/sha256"
	"fmt"
	"os"
	"path/filepath"
	"strings"
	"time"
)

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _metricStoreCaCrl = []byte(`-----BEGIN X509 CRL-----
MIICiTBzAgEBMA0GCSqGSIb3DQEBCwUAMBoxGDAWBgNVBAMTD21ldHJpYy1zdG9y
ZS1jYRcNMjMxMDAzMDkzNjE2WhcNMjUwNDAzMDkzNjEyWjAAoCMwITAfBgNVHSME
GDAWgBQSGXQdDiXjNoVkWUipOfoDbvkx6TANBgkqhkiG9w0BAQsFAAOCAgEAa3Sq
Wk8qqwFznsbmEez3W6Y49FNOZZcwzsVsOK0cPpDuwX+cD1V/S8pRtD5KTdU4tswf
6LwoQu1vEUmNX9fzgRy8kQFJOPw16XrLEHGxtSj2DmG+11HJdqwmi5d+QTZVo+Rp
su3GamrExsCcOGoWADot3AnprYjcFysVYnFMtqmxo2Vk5ikD3IgGBZVvfIWl57u+
b/DXVKDBeeIdDTYbhyJXMQCrAmNswS6LelhQPYYUDWTQtN7gZeNWCLo4p+Dl8jut
oxN5/rhDrD2Xk1adhY2+nbroaJGrlqvTB7+HTbeouDfM+0MroMNcGFMx/UuV/evy
t3zBYzvIUi1bIUpY32VlBaD1dQ2qd7731HZCJo7wigSXCCwM5SzhCEpFZJ2+mJVl
y7/GrG1b/BgbZ7cN3G2YJ2cQTVtnwhXBECS/YewRso9AK9lYyhZQrxlDEKcg2u78
E9Io4drcLLll0F/T3V6MTp0kq0JTz98r4FHncOl7lXDB2rN8pnKxMDcVBSs1NszZ
owB83ztlTGlieKNSldjcrq1Dl0nWqmu6NMmQBZwe4H8/2r15ADYn9bc+zdtmU4O+
gRk7crK77K6UvyQN1GdWiXpaYGIbSDhMRHPyXdCZs8almMq7ON/FJkwsqlw/ACzN
9ZQT6ntwj/ehb/F0leSLy3ou5hxSIM5G1g7MMpE=
-----END X509 CRL-----
`)

func metricStoreCaCrlBytes() ([]byte, error) {
	return _metricStoreCaCrl, nil
}

func metricStoreCaCrl() (*asset, error) {
	bytes, err := metricStoreCaCrlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store-ca.crl", size: 934, mode: os.FileMode(0444), modTime: time.Unix(1696325776, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2a, 0x7c, 0x1, 0x66, 0x66, 0x99, 0x65, 0x2f, 0x33, 0xf6, 0xac, 0x4d, 0xee, 0x6f, 0x2f, 0x9a, 0x7b, 0xc6, 0xc7, 0xdf, 0xeb, 0x58, 0x1e, 0xf9, 0x64, 0xb6, 0xe8, 0x9b, 0x50, 0x70, 0x45, 0xd9}}
	return a, nil
}

var _metricStoreCaCrt = []byte(`-----BEGIN CERTIFICATE-----
MIIE9DCCAtygAwIBAgIBATANBgkqhkiG9w0BAQsFADAaMRgwFgYDVQQDEw9tZXRy
aWMtc3RvcmUtY2EwHhcNMjMxMDAzMDkzNjE2WhcNMjUwNDAzMDkzNjEyWjAaMRgw
FgYDVQQDEw9tZXRyaWMtc3RvcmUtY2EwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAw
ggIKAoICAQCq9NBzDePVWgXx15cCVR7wKgBj9Zaj/jfnakJ9nAvoMWxK5I2tQ2+l
9P0ygymZt9i1nBY2IPC1ElCv4Rnjzj3NYuvqi+SHj/xkS9yM5o23FqMh4DbmlEp3
oAqeCSOi+JqhWlwG5vAB45M8EZe1at0ZAsRdU5vKDQsuDE6YUTNFdkxxXAqKbdsT
z3W4fAHmedaCcCePZ3GsFpvUWl16vrsaA7UMGfdmkvMkhYYnk8HinuawzMpVTjQg
kpjZAJnlN++p0+IgWGi5GLo427+szKz5dyIrx/yJ/g09VRbLivfZCL4JIa+r0LX4
yiYmXZMa1PSwBt8BJizpt4D6uicUXKKRjKg9jNVjyfaGsHc2hM495jxe0yfGQ2cu
hmr3DEp6Lceutzoy5aB7BdT58dU7oNMuG0rV8Z+lGxPzy7tEgb9ktJyWnSvqZUfM
yWXENnaUS/Ql6UakZZDSH0WS0sXZ9W1XUiklVdRBbV5EO+jX+Z8j+hxe1AksV+oc
hdaTrdFHZ6LKg6BJc9l0HbjFpTmo7rvTIoQQ8dzijjQZJlgYY9hVKoE+wmoYDzxr
GAo0fQn6jhxyi2IOMIRDDN2Hcfi7AfO6bLcxIqApGoR6xo7z3QdMDXHNshCtAK3c
xu1sc98CgOYGfYMODRwDCQq6oBmavZx/NlO/RdcuSL/TqO1QCltSfwIDAQABo0Uw
QzAOBgNVHQ8BAf8EBAMCAQYwEgYDVR0TAQH/BAgwBgEB/wIBADAdBgNVHQ4EFgQU
Ehl0HQ4l4zaFZFlIqTn6A275MekwDQYJKoZIhvcNAQELBQADggIBACtpkGCWGsMY
Wp43FjiE0ve7CsLp8cipP+Rvz4uD6gUDaI2mG0Eiud3MrlH7yays4ctSLJJOXBaV
bhOxuDX6p/HHXgXFS8/tdafO2VcM8kgqyeGIHH+ZpbLPm4sj/1Ru0QCmB0VYwfmJ
HeOyn4Vfa+A45PX3rQ/vtsJBguwQGcKJ7EvZaNJj0QbDQwJAlq7LHtKf4LuJu8yf
b2dp5zyixcZYnKttroHOoQ1wIZ0403+uy7hJZBNABOuVc2XktCekq47TaDv0IzSP
HwIX7XU5h3EW0ZKhLgdjl47xjg/ioINtI/LpJS0U2NB8QhCeeUL00Ww1B0bb7dgb
kfSF+40davfPKTIb9yiLiUyAAVIDNs1mKK8C2V+hsFDH843Bu6I46KQtiiAu08W6
lASZ/QlARI28teDAcJhtzukHHrfbtVTmcpe9+CJglAR3BdtVP2FjLrx4rntIXHcV
xtEB1BqXpVSkgT5yhQwaSUPkXPCf88NMVmyTPEex46+ALkoKKiyqq7K3bn55H6vI
l/vvyqmb7JY52FbvlA9wgDZmZrejshp9V5IGsc7t86FBCBVbQSK2gQWZjrJ/8A+R
bFjdG1F/43lJCCR2hb12RnoDj6Ynn25qMY7uKa8FXEN9wKdntjM++WC+pwSR91+x
aayWv0GF/AoagvjfRiwD08qcsAgl2M/n
-----END CERTIFICATE-----
`)

func metricStoreCaCrtBytes() ([]byte, error) {
	return _metricStoreCaCrt, nil
}

func metricStoreCaCrt() (*asset, error) {
	bytes, err := metricStoreCaCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store-ca.crt", size: 1777, mode: os.FileMode(0444), modTime: time.Unix(1696325776, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x50, 0xa0, 0x94, 0x5d, 0xf0, 0xab, 0xe0, 0x34, 0x42, 0x5a, 0xc4, 0x66, 0xc4, 0x13, 0x6b, 0x35, 0x1e, 0x23, 0xf9, 0xf1, 0x29, 0xb3, 0xe7, 0xf2, 0x1c, 0xab, 0x3c, 0x9a, 0x70, 0x90, 0x7a, 0x59}}
	return a, nil
}

var _metricStoreCaKey = []byte(`-----BEGIN RSA PRIVATE KEY-----
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
-----END RSA PRIVATE KEY-----
`)

func metricStoreCaKeyBytes() ([]byte, error) {
	return _metricStoreCaKey, nil
}

func metricStoreCaKey() (*asset, error) {
	bytes, err := metricStoreCaKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store-ca.key", size: 3239, mode: os.FileMode(0440), modTime: time.Unix(1696325776, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xae, 0x8c, 0x3, 0x65, 0x1d, 0x68, 0xf9, 0x60, 0x5e, 0xd3, 0x27, 0xec, 0x1a, 0x13, 0x3e, 0x6a, 0xe3, 0xe5, 0xc2, 0xbb, 0xe, 0x35, 0x11, 0x2c, 0x94, 0xc7, 0x58, 0xeb, 0xa2, 0x62, 0x40, 0x11}}
	return a, nil
}

var _metricStoreCrt = []byte(`-----BEGIN CERTIFICATE-----
MIIESDCCAjCgAwIBAgIRAN1wWNwruGPJgdJSxWKHRN4wDQYJKoZIhvcNAQELBQAw
GjEYMBYGA1UEAxMPbWV0cmljLXN0b3JlLWNhMB4XDTIzMTAwMzA5MzYxNloXDTI1
MDQwMzA5MzYxMlowFzEVMBMGA1UEAxMMbWV0cmljLXN0b3JlMIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmkHTw5WqIHXKaAM2ZStvA5tKtS0C1hOtCo7d
8Zyq3yVVechGOzWmPzJD9FyKtIsB8kkLrJieLNtQck+J0fDR72qqcLAdMYYvdSZA
kyNj9VVBWhK2dNZRQaWekCWi1x2MVNm+kKHo2c5c18CEPqnuCqmP5DQNgsiFME6r
D7QAb4vwI+qIy5VgATeRGjIkgmCs9g5R5z32Yr52N0ptI5RI93YC/Yl+U7zS4c+A
P/XCanmW9sSxDe4ei/D0MZ80Y08vnq+yPTzgyI2+70nyzTwLYAvo6HH+VaEc9zk6
4trz/QiNQacy45tjX3+9M5eDBF7P0wSDdUARX0VbujwlwCt5cwIDAQABo4GLMIGI
MA4GA1UdDwEB/wQEAwIDuDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIw
HQYDVR0OBBYEFNVmm1nz+NCDrWTNAxE+qzqb+pMoMB8GA1UdIwQYMBaAFBIZdB0O
JeM2hWRZSKk5+gNu+THpMBcGA1UdEQQQMA6CDG1ldHJpYy1zdG9yZTANBgkqhkiG
9w0BAQsFAAOCAgEAQhDXyI8eK+QtDifN8/yXqTC5VRn4IcThNFWD9m64Ax+jcmPT
WDccqEa5bAHZ4ZZ1yCOqFqz53QebQoXtJFiL70yvOnq1A24zSPBeLFWP49TTg2fc
Y/F/5uJhzR4QZrhRo9TrKZWJ0Mboziu/D917SdoQiUuO2TLeNv7G1bgffLgx9ASI
uKbZgzT/f8XBRLVxUrJlrbNYgXgUXr8iQI+kSA5Uxn3F3hMexX8ssNajmjNmQyL5
sy1/gemIIqz5JNULJFjA1oXVIdRw/F1OnjGiryYFD3oHONYckGFpO9pC5hZESwaB
CVIktB/k3rlXXnbUSAAo0358tq56tbN6YfhE4uq+PczQySC4SAK440KhxuwCuG65
71vS5m5h8HYX/sSHe9mMdNqSKqoOEakaZ9LwPO/1wP0gYlubN8kMz+mUS0Qw7LdP
0yxibI348knaxOPxgNdc/X2KsWQmHtUzGbJxWW5wbsXVtg+0a9KzCuDPcNwhQEBq
KuZPKjyN/XFnap2wQ20p8BJYktXP2lAGx2QgDgPiVAxd9b8PoEbv2d94Uka+mg7F
yGHkMyLNgQX3AqA9zaMirCIxpbcda73myYO/W3qZE/UcisdOx/6wiwtMZ7LyQbhh
+N4SGNPsxQaTcmpCCAbR0P9cAJROySLLdB7GA28nA+mFH18IjwbuOo3RPIM=
-----END CERTIFICATE-----
`)

func metricStoreCrtBytes() ([]byte, error) {
	return _metricStoreCrt, nil
}

func metricStoreCrt() (*asset, error) {
	bytes, err := metricStoreCrtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store.crt", size: 1545, mode: os.FileMode(0444), modTime: time.Unix(1696325776, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2, 0xfa, 0xc3, 0xe8, 0x1a, 0x6e, 0x97, 0x41, 0x6, 0xf5, 0xd9, 0x6c, 0x3e, 0x63, 0x7a, 0x6f, 0x75, 0x70, 0x5a, 0xdb, 0xf6, 0x96, 0x43, 0x40, 0x5c, 0x40, 0x9a, 0x60, 0x16, 0x6d, 0x81, 0x26}}
	return a, nil
}

var _metricStoreCsr = []byte(`-----BEGIN CERTIFICATE REQUEST-----
MIIChjCCAW4CAQAwFzEVMBMGA1UEAxMMbWV0cmljLXN0b3JlMIIBIjANBgkqhkiG
9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmkHTw5WqIHXKaAM2ZStvA5tKtS0C1hOtCo7d
8Zyq3yVVechGOzWmPzJD9FyKtIsB8kkLrJieLNtQck+J0fDR72qqcLAdMYYvdSZA
kyNj9VVBWhK2dNZRQaWekCWi1x2MVNm+kKHo2c5c18CEPqnuCqmP5DQNgsiFME6r
D7QAb4vwI+qIy5VgATeRGjIkgmCs9g5R5z32Yr52N0ptI5RI93YC/Yl+U7zS4c+A
P/XCanmW9sSxDe4ei/D0MZ80Y08vnq+yPTzgyI2+70nyzTwLYAvo6HH+VaEc9zk6
4trz/QiNQacy45tjX3+9M5eDBF7P0wSDdUARX0VbujwlwCt5cwIDAQABoCowKAYJ
KoZIhvcNAQkOMRswGTAXBgNVHREEEDAOggxtZXRyaWMtc3RvcmUwDQYJKoZIhvcN
AQELBQADggEBADWV+ndtCbM19Xa13mbNTM+yX+/0597lPBag7UqR1BX33e9wKKZx
AUsAfrSdmN/xbJV3fk8Mj+dOIcMs/fwbqMTfzdv55GwaPPbnQcJbLQ9QvmfbzmLu
1egPTHrnPuZuZ9JDgUr3LqCxe3wq3eYQ6Xfg4LThViBnFxe61McNfjqD52LMM/Ml
GWydWoIg+ARNyoX6ANeATz9/98uWhkexRCu5pANyi7BBrL6eyEWrr2Polqxk8tBv
/qZ7GivBaQVntcB2n+iDIDVBfIYs/razhXrh/3DZDfBmOxQWtMqhNJ3YTFq3lo1o
jO3qmuBu7TVzChR64Y+RIzjRJFQD8O63Wjc=
-----END CERTIFICATE REQUEST-----
`)

func metricStoreCsrBytes() ([]byte, error) {
	return _metricStoreCsr, nil
}

func metricStoreCsr() (*asset, error) {
	bytes, err := metricStoreCsrBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store.csr", size: 952, mode: os.FileMode(0444), modTime: time.Unix(1696325776, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x2b, 0x51, 0x32, 0xcb, 0x15, 0xa, 0x72, 0x31, 0xdb, 0xa0, 0xcd, 0xb8, 0xbc, 0xc8, 0xd7, 0xbf, 0x43, 0x7e, 0xd2, 0x86, 0xf3, 0x9f, 0x4f, 0x6e, 0x3d, 0x1f, 0xac, 0xaa, 0xd7, 0x33, 0x99, 0x29}}
	return a, nil
}

var _metricStoreKey = []byte(`-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEAmkHTw5WqIHXKaAM2ZStvA5tKtS0C1hOtCo7d8Zyq3yVVechG
OzWmPzJD9FyKtIsB8kkLrJieLNtQck+J0fDR72qqcLAdMYYvdSZAkyNj9VVBWhK2
dNZRQaWekCWi1x2MVNm+kKHo2c5c18CEPqnuCqmP5DQNgsiFME6rD7QAb4vwI+qI
y5VgATeRGjIkgmCs9g5R5z32Yr52N0ptI5RI93YC/Yl+U7zS4c+AP/XCanmW9sSx
De4ei/D0MZ80Y08vnq+yPTzgyI2+70nyzTwLYAvo6HH+VaEc9zk64trz/QiNQacy
45tjX3+9M5eDBF7P0wSDdUARX0VbujwlwCt5cwIDAQABAoIBAEMSfFF+sgqLLQcs
3mn/CLY4v7MnbyRGSeddV4PG60U7pn7dZiw4l6DC6mlGE8mM57vBpyHU+nHmqoQJ
sZNncuD3METvTsJJ5ji5+ToBGWWDPHc9y7fhuFMjAF8M/lEqt+ntA78/p0+NOzFU
tCvLF4XrVHWVbIqBRehLTHX3fnkBYwBW0Ubh0aVPHoConeopsJIHkOFHOfzAJe2j
jbCUkkwUofOxAcSiyMFD8NTpJnBZgiEw6DnCr5i09bDHla0yBBqWws14/d8mm/Zr
GnDAwevQx4Lpe5KS/T1cBxbhagE34B4UjMRdxncqb7Ejhz8N3/0cVxJf+QWyO612
T9LoTgECgYEAyrYR7c3ArUTLVCI8ICdr7ZrtDGxBzIxw9W1i3fy/XufxXLgTAs8S
bPXhPKrymeOCzCeURMiATTrWej9M7UmilNq1uhccVcYzfBfF0aVoUSYNgP4ThG0N
HNchVxdls4dHoY5c0bSm+Uh4Vrmgb+AXppUlXX8IhkR5Qe6D8QbpCmMCgYEAws7t
AH4Exjh2jZvCkjOAzAsjQfOCdWiJ2X7uW15LeTgiWXCO3oEH/ve/PgpbmZCYVUcv
MDxrSj47jQMp1DWiYys6PosR7GQy655jWWUabFm8Zk0b8D3UHCbEDLwAYjcQ+Lol
6oSsKO58fIIhHXe+ngDQvJy/ayTCBtMtFyyb+bECgYAmlUUQWEtGL4Pr/aAoFpjK
XuSjqq9TeZ++dxWMXyEltUwRc8/ahwNgzeQTIg6PD+jDZv0nomoZSQuttQK1X4Cc
iIxyYRe5k8IU6olyf+M9HtsPJE0etYr7ZE8qPn/TDfqqW2h7WcE2TX7qMubApIyb
3mOASj+bHsldrUJbzA7rNQKBgQCXwroxavrvLOd2lAQ0/zh0PKz/4OMd8g2JyW+I
8GGdkpR31s8GGcEP6RMsEsefT1zM+oKRclAm62pbBT7d2daiqPdb591Tqg9dLOu6
pZ+7DwFNNP7x3kjSkYSjYwZtfPaUvfdxxl+UF44VNQ71NObjkkEK3pXksyMQTA1R
g2gTUQKBgQCaXGuddx3E1qEw3bbhjZZXu4PrsIWp1QA9axokieH9igIBkVJVknjs
PH1UsKjjhFD9DQ9/MPvpF4Bdk1G111IGV8li0Xe3zRLyDymg5SHdicRFt3hAZTlv
jVzfXgp4Pp9sogvV9+zdDtd4AUtg+C3YCbyJ3+ZR3JZSjwYtyVbqKw==
-----END RSA PRIVATE KEY-----
`)

func metricStoreKeyBytes() ([]byte, error) {
	return _metricStoreKey, nil
}

func metricStoreKey() (*asset, error) {
	bytes, err := metricStoreKeyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "metric-store.key", size: 1679, mode: os.FileMode(0440), modTime: time.Unix(1696325776, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x33, 0x1c, 0x8, 0xef, 0x1f, 0xfb, 0x6, 0x12, 0xa0, 0x8e, 0x40, 0xab, 0x64, 0x8e, 0xf, 0xeb, 0xa9, 0xa1, 0xf9, 0x8b, 0x4c, 0x40, 0x75, 0x4b, 0x86, 0x63, 0x3d, 0x96, 0x4f, 0x1e, 0xa6, 0xa}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"metric-store-ca.crl": metricStoreCaCrl,
	"metric-store-ca.crt": metricStoreCaCrt,
	"metric-store-ca.key": metricStoreCaKey,
	"metric-store.crt":    metricStoreCrt,
	"metric-store.csr":    metricStoreCsr,
	"metric-store.key":    metricStoreKey,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"metric-store-ca.crl": {metricStoreCaCrl, map[string]*bintree{}},
	"metric-store-ca.crt": {metricStoreCaCrt, map[string]*bintree{}},
	"metric-store-ca.key": {metricStoreCaKey, map[string]*bintree{}},
	"metric-store.crt":    {metricStoreCrt, map[string]*bintree{}},
	"metric-store.csr":    {metricStoreCsr, map[string]*bintree{}},
	"metric-store.key":    {metricStoreKey, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
