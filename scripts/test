#!/bin/bash

if [[ "$(ulimit)" != "unlimited" ]]; then
  ulimit -Sn unlimited
fi

trap "echo Exited!; exit 1;" SIGINT SIGTERM

PROJECT_DIR="$(cd "$(dirname "$0")/.."; pwd)"

function print_usage {
    echo "usage: test [subcommand] [go test args]"
    echo
    echo -e "\033[1mSubcommands:\033[0m"
    echo "   unit              Run all the tests, excluding cleaners (default)"
    echo "   acceptance        Run just the acceptance tests"
    echo "   cleaners          Run tools that clean the code base"
    echo "   fast              Run a subset of quick tests"
    echo "   race              Run just race detection"
    echo "   norace            Run all the tests, minus race detection"
    echo "   all               Run all the tests, including cleaners"
}

function print_checkpoint {
    echo
    bold_blue "==================================  $@"
}

function green {
    echo -e "\033[32m$1\033[0m"
}

function red {
    echo -e "\033[31m$1\033[0m"
}

function bold_blue {
    echo -e "\033[1;34m$1\033[0m"
}

function check_output {
    eval "$@"
    exit_on_failure $?
}

function exit_on_failure {
    if [[ $1 -ne 0 ]]; then
        red "BITTER SUITE FAILURE"
        exit $1
    fi
}

function run_cleaners {
    print_checkpoint "Running Cleaners"

    go get github.com/kisielk/gotool

    if ! which goimports > /dev/null 2>&1; then
        echo installing goimports
        go get golang.org/x/tools/cmd/goimports
    fi
    if ! which misspell > /dev/null 2>&1; then
        echo installing misspell
        go get github.com/client9/misspell/cmd/misspell
    fi
    if ! which unconvert > /dev/null 2>&1; then
        echo installing unconvert
        go get github.com/mdempsky/unconvert
    fi

    echo running goimports
    goimports -w ./src/
    echo running gofmt
    gofmt -s -w ./src/
    echo running misspell
    misspell -w ./src/
    echo running unconvert
    unconvert -v -apply "./src/..."
    return 0
}

function run_race {
  TEST_OPTIONS="-ginkgo.randomizeAllSpecs -ginkgo.slowSpecThreshold 20"

  print_checkpoint "Checking for Data Races"
  race_log=$(mktemp)

  tests=$(go list -mod=vendor ./...)

  go test -mod=vendor -race $tests \
    ${TEST_OPTIONS} \
    $@ 2>&1 > ${race_log} || true
  if egrep 'DATA RACE|race detected' ${race_log}; then
    cat ${race_log}
    rm ${race_log}
    return 1
  fi
  rm ${race_log}
  echo "No races found"
}

function run_unit {
  check_output run_norace $@
  check_output run_race $@
}

function run_norace() {
  TEST_OPTIONS="-ginkgo.randomizeAllSpecs -ginkgo.slowSpecThreshold 20"

  tests=$(go list -mod=vendor ./...)

  print_checkpoint "Running Tests"
  go test -mod=vendor $tests \
    ${TEST_OPTIONS} \
    $@

}

function run_acceptance {
  TEST_OPTIONS="-ginkgo.randomizeAllSpecs -ginkgo.slowSpecThreshold 30"
  tests=$(go list -mod=vendor ./... | grep acceptance)

  print_checkpoint "Running Acceptance Tests"
  go test -mod=vendor $tests \
    ${TEST_OPTIONS} \
    $@

}

function run_fast {
  TEST_OPTIONS="-ginkgo.randomizeAllSpecs -ginkgo.slowSpecThreshold 2"
  exclude="pkg/auth internal/rules acceptance"
  tests=$(find ./src -name '*_suite_test.go' -exec dirname \{\} \; | egrep -v "/${exclude// /|}/")

  print_checkpoint "Running Fast Tests"
  for skipped in $(echo ${exclude}); do
      echo -e "skipping '${skipped}':\n$(find . -name '*_suite_test.go' -exec dirname \{\} \; | grep ${skipped})\n"
  done

  go test -mod=vendor ${tests} ${TEST_OPTIONS} $@
}

function run_all {
    check_output run_cleaners
    check_output run_race $@
    check_output run_norace $@
}

function parse_argc {
    command=run_unit
    if [[ $# -eq 0 ]]; then
        return
    fi

    arg=$1
    case "$arg" in
        -h|-help|--help|help)
            print_usage
            exit 0
            ;;
        acceptance|all|cleaners|fast|unit|race|norace)
            command=run_$arg
            ;;
        *)
            echo "Invalid command: $arg"
            print_usage
            exit 1
            ;;
    esac
}

function setup_env {
  print_checkpoint "Setting up environment"
  unset GOPATH
  export GORACE="halt_on_error=1"

  echo "Done setting up environment"
}

function main {
    setup_env
    parse_argc $1
    shift
    "$command" $@
    result=$?
    exit_on_failure $result
    green "SWEET SUITE SUCCESS"
}

main $@
